[
  "constructor(address _owner, uint256 _quorum, address _axiomV2QueryAddress, address _snapshotAddress, uint256 _snapshotSlot, address _spaceAddress, bytes32 _querySchema)",
  "error ArrayLengthMismatch()",
  "error AuthenticatorNotWhitelisted()",
  "error AxiomV2QueryAddressIsZero()",
  "error CallbackTypeIsNotOffChain()",
  "error CallerMustBeAxiomV2Query()",
  "error EmptyArray()",
  "error ExceedsStrategyLimit()",
  "error ExecutionFailed()",
  "error FailedToPassProposalValidation()",
  "error InvalidCaller()",
  "error InvalidDuration(uint32 minVotingDuration, uint32 maxVotingDuration)",
  "error InvalidPayload()",
  "error InvalidProposal()",
  "error InvalidProposalStatus(uint8 status)",
  "error InvalidSpace()",
  "error InvalidStrategyIndex(uint256 index)",
  "error NoActiveVotingStrategies()",
  "error OffchainVotesAlreadyProven()",
  "error OffchainVotesNotProven()",
  "error ProposalEndBlockNumberDoesNotMatch()",
  "error ProposalFinalized()",
  "error ProposalStartBlockNumberDoesNotMatch()",
  "error QuerySchemaDoesNotMatch()",
  "error SnapshotAddressDoesNotMatch()",
  "error SnapshotSlotDoesNotMatch()",
  "error SourceChainIdDoesNotMatch()",
  "error SpaceAddressDoesNotMatch()",
  "error UserAlreadyVoted()",
  "error UserHasNoVotingPower()",
  "error VotingDelayHasPassed()",
  "error VotingPeriodHasEnded()",
  "error VotingPeriodHasNotStarted()",
  "error WriteOffchainVotesCalledBeforeProposalMaxEndBlockNumber()",
  "error ZeroAddress()",
  "event AxiomExecutionStrategySetUp(address indexed owner, uint256 quorum, address indexed snapshotAddress, uint256 snapshotSlot, address spaceAddress, bytes32 querySchema)",
  "event AxiomV2Call(uint64 indexed sourceChainId, address caller, bytes32 indexed querySchema, uint256 indexed queryId)",
  "event AxiomV2OffchainCall(uint64 indexed sourceChainId, address caller, bytes32 indexed querySchema, uint256 indexed queryId)",
  "event Initialized(uint8 version)",
  "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
  "event QuerySchemaUpdated(bytes32 newQuerySchema)",
  "event QuorumUpdated(uint256 newQuorum)",
  "event SpaceDisabled(address space)",
  "event SpaceEnabled(address space)",
  "event TransactionExecuted(tuple(address to, uint256 value, bytes data, uint8 operation, uint256 salt) transaction)",
  "event WriteOffchainVotes(uint256 proposalId, uint256 queryId, uint256 offchainForVotes, uint256 offchainAgainstVotes, uint256 offchainAbstainVotes)",
  "function axiomV2Callback(uint64 sourceChainId, address caller, bytes32 querySchema, uint256 queryId, bytes32[] axiomResults, bytes extraData)",
  "function axiomV2OffchainCallback(uint64 sourceChainId, address caller, bytes32 querySchema, uint256 queryId, bytes32[] axiomResults, bytes extraData)",
  "function axiomV2QueryAddress() view returns (address)",
  "function disableSpace(address space)",
  "function enableSpace(address space)",
  "function execute(uint256 proposalId, tuple(address author, uint32 startBlockNumber, address executionStrategy, uint32 minEndBlockNumber, uint32 maxEndBlockNumber, uint8 finalizationStatus, bytes32 executionPayloadHash, uint256 activeVotingStrategies) proposal, uint256 votesFor, uint256 votesAgainst, uint256 votesAbstain, bytes payload)",
  "function getProposalStatus(tuple(address author, uint32 startBlockNumber, address executionStrategy, uint32 minEndBlockNumber, uint32 maxEndBlockNumber, uint8 finalizationStatus, bytes32 executionPayloadHash, uint256 activeVotingStrategies) proposal, uint256 votesFor, uint256 votesAgainst, uint256 votesAbstain) view returns (uint8)",
  "function getStrategyType() pure returns (string)",
  "function isSpaceEnabled(address space) view returns (uint256)",
  "function offchainVoteResults(uint256 proposalId) view returns (bool areOffchainVotesProven, uint256 offchainVotesFor, uint256 offchainVotesAgainst, uint256 offchainVotesAbstain)",
  "function owner() view returns (address)",
  "function querySchema() view returns (bytes32)",
  "function quorum() view returns (uint256)",
  "function renounceOwnership()",
  "function setQuerySchema(bytes32 _querySchema)",
  "function setQuorum(uint256 _quorum)",
  "function setUp(bytes initializeParams)",
  "function snapshotAddress() view returns (address)",
  "function snapshotSlot() view returns (uint256)",
  "function space() view returns (address)",
  "function transferOwnership(address newOwner)"
]
