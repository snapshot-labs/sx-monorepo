import { defaultAbiCoder } from '@ethersproject/abi';
import { JsonRpcProvider } from '@ethersproject/providers';
import { describe, expect, it } from 'vitest';
import createApeGasStrategy from '../../../../src/strategies/evm/apeGas';

const HERODORUS_CONTRACT = '0xfaf1fc1c0b03Ef7E4074C209D254895A7193aE8b';
const VIEW_ID =
  '0x0000000000000000000000000000000000000000000000000000000000000001';
const DELEGATION_REGISTRY_CONTRACT =
  '0xdd6b74123b2ab93ad701320d3f8d1b92b4fa5202';

// Live VP setup
// 0xc4Af7180FD4BBC1E5A3e10eB82801Ab6238eB1C5 has 0.05 APE, doesn't delegate to anyone
// 0xa40839f84CF98Ee6F4fdB84c1bB1a448e7835EfE has 0.05 APE, delegates to 0xC7Ca2aC1Ae120eBa3aB42a8BF4cb071895641ceF
// 0xC7Ca2aC1Ae120eBa3aB42a8BF4cb071895641ceF has 0.1 APE, gets 0.05 APE from 0xa40839f84CF98Ee6F4fdB84c1bB1a448e7835EfE

describe('apeGas', () => {
  const metadata = {
    delegationId: VIEW_ID
  };

  const apeGasStrategy = createApeGasStrategy();

  const provider = new JsonRpcProvider('https://rpc.brovider.xyz/33111');
  const params = defaultAbiCoder.encode(
    ['address', 'bytes32', 'address'],
    [HERODORUS_CONTRACT, VIEW_ID, DELEGATION_REGISTRY_CONTRACT]
  );

  it('should return type', () => {
    expect(apeGasStrategy.type).toBe('apeGas');
  });

  it('should return params', async () => {
    const useParams = await apeGasStrategy.getParams(
      'vote',
      { index: 0, address: '0x0', params },
      '0x537f1896541d28F4c70116EEa602b1B34Da95163',
      metadata,
      {
        space: '0xf6238F73A87D390CB00b2B380D2B777E13Fe2725',
        authenticator: '0x0',
        strategies: [],
        proposal: 8,
        choice: 1,
        metadataUri: ''
      },
      { networkConfig: {} as any, whitelistServerUrl: '', provider }
    );

    expect(useParams).toBe(
      '0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000537f1896541d28f4c70116eea602b1b34da951630000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000092e1da974c09dde0000000000000000000000000000000000000000000000000000000000000ba00000000000000000000000000000000000000000000000000000000000000ac1f90abeb90214f90211a0bbd2172702fc40ce66aa14b0398b8dd10c81dd4b86742763d26a864e4ec0de3aa01aa55b29f854aa6ccf819893596779aaecf57494858992a0cf8282a5f79152a4a0a63682a98f0b67a7d8c684a51791501c54135d44b803bff9fc4da0ca5e2f4527a0e5679afd1f789ac8746ab4561131bab6f62c66be93796a843a3d69ea2e6e1279a058d3691b0223d566232582ae48697dee2e9132708f9435067de58f9007a37a99a04ed701b9497ea268e0c97ddb87a2b8a5e44c16b94316e97a437551619e9f3ceba0cfedc3d01fca60761ca7ede213eef693b8e71809e99ba08f9af86d7b00537235a04d325f46374a0905fa811bdd4cfcf8d2456fb633bf63072c4ab08fea8526b8cca0afb4fe5066622671af040702e85e50c1eeaac488073701efb766ac7145eb5985a0ee4865ede220bb62f68b2aca9f94d36166164aca0f49a1532febe36c53118505a05d947a0257044a9a0376e81d80986e10283b240eea49faa6525b165cf2d2c71ba0966e986ff8e49800b57e29062655a448d1f9821f5e773de2ac241eea4bf02c5aa07879cd2c86fe49710e1028e9b09987e143f38b7e7ae3c236cb94f1215f39056ba0b4e8861c2959b23e5f4ab411ffe58b7c769ff2cfe0f2deb5802f913ad2447903a037d45ab4e803609c04e940f88b8354be410c6a0d1d1e3de3f15634d65fac310ca01a9673938239f5b20e40e05bda32b8709c5768ab2b6ec9811a0467c8a144d76e80b90214f90211a03a9d67d9867e844fdb44516e7135b37588e8c97f3b051507d7f469ee87f8442ea04ce87e356b12ba7940f216b519bca7e6dd6028945a5131cf720ecec14feac732a0225a72b2b066fedaf2550051cbff8c33c4d88b71a265e175b99893042edbe51da0ce2ac6b76d62be9d60ac74bf69c2719d9c533a511ff533ac0c18141ec994f157a07763f3952ce23fa89fd33cf0dfe56eef7f0aa99bf2379640862dda7dff1036baa02994edc7d58eab7bb0978cd8f8363ac7244ad8726adb3fa83c726c6e2bdf4b42a0d7971713646cb7e56ec432d5c4771faa9522959af400dd77b8350ca46e2593c1a01c4f5d421f9e6f01776e49594521460df475242103a9167f211fd18d367e6d6aa01c3ba876d9ad1a32ce568afedb5bd41e01f22dbdef679222025ae752b7da1dd2a0673c58e15db47c54e3d1aaab57a24aea26a5a0a4d5567008860a8ee52b555785a027e06da0408e7eafd83565d017c547fd733605eab016c78da9f4e03bb2ee0e7da06258b030360a4e22d0317a627677530d61f0e9fecfa7d9d69f41c95f1696088fa0d92cefee82eade6cd6649c423d0646125dd20830202cb752f9255b78e1278cc7a015b4aef1c933e52a1795f3bc08ba6f9d1df78b58fb20d216d5bb5745c06cbb00a0ffac019a0e8c3fa64f58ee82e5bc0ff1161117ba114ca95d196188ea3d71852da085fa939057e0154e2d26bc4688cb52be4389304ffd726013705bbeca8904760e80b90214f90211a055bf7fba0ff658fef46747fe5b7616dcfe794ce8f42745b878b41ec60a8205d5a0910799ba2dcd8c32827f8f8e0581388dc7d59d89d15bd9e580976c6e478b2a52a00c2549eac976a1c3b991ed2765a92eee1c500087c8c429aca322f4f592d1c801a034cdb411fd068b2fee43125a4b136dacb57f60531a95979c1ee22022ad3f84c0a0963a9362271c41e9fe2b582d137675cd8970105a90dca2d2d68f5cb1d63d5d1ba077edbf755738d8c25cd3a78608a8191e9e968dc9ffba4ba1ca55b5925f839a35a03f46ec3717be6376d1816027c28f7157cad22a6dc64ec7a41113ca19260b93f3a0262defb26deac2a7d887a6e3624cfdc3cc10b415903bc2df544b035e6befb98da07e95faebf03c56a1c265ac5921dae319f9d1891625096f0e2921189ff30b1104a03ece38f95ca157f5df68ce52bc2c73f902894ec3306770221dcc036b7a3e8b44a00af75465e9caa1cd2232b943191a8eea10142f5630766aeea6928ba1953415f4a04b5de684cc4468387e7c5a5bf6563f2f37ea139a4920d4f220b43758da0f58cba093635062fc155e058d59ad2085f9c17dd8b93c41a311ff6ff8ef61b50ff8253da0751e4c759a1670feeda5f61ba8e3d74688f260fdbbf46becf4dac8a56bf48a63a01e6b845a959e1dccce724e7910f48c6388f92e55aa8aa1dd1282c5b37f780f5fa0b7adedfc44c58a6cf6dab5a1b8fd4099458dc5af702a03ec781106f98093509680b90214f90211a0800cab679e6687704ff751836060da9814b87fd21f3649f1bf2f453cce53fa02a059460b3bd4b01973b54adf5d57dc4e7934f13a1bc2e28f9b14ce99c25aab9ebfa02f362f6cb82ff6d5b540be5f38efc2a770687823fd6f8dbfce625dbb76e7f201a0ef072a9b6171cf36cea25ae4c09f54c988435160a43a7dfa3248cd7820710891a0cf6a9f1ce22f1954fb2100d05c69a98886bd8de7d37c06d015ac6d8f22e3cc75a0267ee32f1bc8b7776c99ae466312f48b3a0fc7eb25800c9843f4a704dada565da0867561038ff97dba34abe90f4b108e93e15c2a1bf616f8aaf5cc747528dd4334a0d5a4d4d83c5bf9ceb111f9fa0e30d082508d87c11543d38e2d51cbac831c1f4ba0c556ec02bc0dbc6b9ec5c1b5f5ec05df3af03c8cb73947fecbf86073d6f11cdfa0bc62e2e1c2145ef6ff8424b3d9a1c55167b39a804d5dee3095384e751a696a92a0c6b84f6d35be608a8de519cb770f2da972f616ebb5dbeead7e944bedcb3643e9a06f9a25874daf54360767c740904156f3649e88df176b37d03686babcd99cc464a0173269bc89da2a85ee000c44fe3176f2d2291add6c065633da6f3762dadeb856a0bb706e2f955c844b2aa1bd713079b04425f686ff57b20678f40b369fc4045539a0dde1c9ad88c0bda2ef2c67e229775fc2087c36d730a34865512b92ef8765b2afa01a14e3f4f42fe9d6f439a6d01cf6b75b74f47f8b8934de547688a0d34fb3b84680b901d4f901d1a03a300941300ac444a1e6d1fef1caeb9c58e5012e8ebdba0d032fdac2dde5dd6ba0e1bf614b0e65e0f24e5124ccb4121675918b10f847d350c039518c2142050584a0ad9dad4ac2cc8c2dec13158d0a65904559419d26c73612f6a39b78664a860f6fa01184e3b7effc8b649d918b594b6f056505f965231745e4783d87e496890b78eba02afe8a8fe1f19e326a9a815596bc4e93374511fd2291465c723c4f6be3bcd2f0a0fef0a2c5650eb88563636b6f782ae910550b993a215f8ad9eb4131594e35b452a063edd0c7718098ca972ad6cca7c68a67227e52a1bf406bda1cae30dd4711f066a0a5454b87a9142c35f8abda284be31f5e995e7566368e0268880f861dd2bdff1fa0463042278749694475eac501a628f2bc2404666a8b23657c2e3b4a41a686c22d80a0c142818785d47c9b908a6138db66e14ffc57fd77e3649e5c7f2cd57d003854f4a0395195d6ec766b7ad3550bff8f5c3aeb12cea82d25c81d0866ee4b693c8e6e62a007e41a1a198dbde01e565614dc9cbe32bd6f92517373019d78f94929225c1bd7a0b6072c7f05c0b6265670d6ce47ad496f95352005a18977db59693b50cc16432980a0797dbc7d9fe70d54aa6f7400f1ad6a513f1fbed5e0817588a81347cf2f4778f980b889f8879e3a54ec7820fe8f82d46f7ba93025f9371033911c87263602b96047552cb6b866f8648080840bce5a888405ef5bcc80940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000c6c4915b5aefa222df9cfa210ec4e263e27f450f0000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000005b0000000000000000000000008a2e862b9600645575b3e8ee9da7cf3ebedf53fb000000000000000000000000bc75843bd04388073a95132283fbbfad48d60b670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000258a64c852388011f15bf1f0112c33978dcf3b340000000000000000000000006ef0f2e0d422021024c137c6eb9ad092f9543a0a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f9ed8f6c1c06fdcf3f595646e64900a25710422600000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000003000000000000000000000000145e8fe43d87d7b407dfbfaca34225bb06ded5da000000000000000000000000a158652385f51049042888e0f547c726b1e273f90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c8bf472dbf575b242a397dcfba872ba4f2f7e497000000000000000000000000037f1896541d28f4c70116eea602b1b34da95163800000000000000000000000000000000000000000000000000000000000009a'
    );
  });

  it('should compute voting power for user with delegated APE gas at specific timestamp', async () => {
    const votingPower = await apeGasStrategy.getVotingPower(
      '0xF798ef55aB67fB0b69b036B09a928Cd5E51124d0',
      '0x537f1896541d28F4c70116EEa602b1B34Da95163',
      metadata,
      8445525,
      params,
      provider
    );

    expect(votingPower.toString()).toEqual('661498808915500510');
  });

  it('should compute live voting power for user with own APE gas at null block', async () => {
    const votingPower = await apeGasStrategy.getVotingPower(
      '0xF798ef55aB67fB0b69b036B09a928Cd5E51124d0',
      '0xc4Af7180FD4BBC1E5A3e10eB82801Ab6238eB1C5',
      metadata,
      null,
      params,
      provider
    );

    expect(votingPower > 500000000000000n).toBe(true);
    expect(votingPower < 550000000000000n).toBe(true);
  });

  it('should compute live voting power for user that receives delegated gas at null block', async () => {
    const votingPower = await apeGasStrategy.getVotingPower(
      '0xF798ef55aB67fB0b69b036B09a928Cd5E51124d0',
      '0xC7Ca2aC1Ae120eBa3aB42a8BF4cb071895641ceF',
      metadata,
      null,
      params,
      provider
    );

    expect(votingPower > 149999267997822587n).toBe(true);
    expect(votingPower < 155000000000000000n).toBe(true);
  });

  it('should return 0 live voting power for user that delegates gas to someone at null block', async () => {
    const votingPower = await apeGasStrategy.getVotingPower(
      '0xF798ef55aB67fB0b69b036B09a928Cd5E51124d0',
      '0xa40839f84CF98Ee6F4fdB84c1bB1a448e7835EfE',
      metadata,
      null,
      params,
      provider
    );

    expect(votingPower.toString()).toBe('0');
  });

  it('should throw when requesting unknown block', () => {
    expect(
      apeGasStrategy.getVotingPower(
        '0xF798ef55aB67fB0b69b036B09a928Cd5E51124d0',
        '0xfede39f346c1c65d07f2fa476d5f4727a0d7dc43',
        metadata,
        50000,
        params,
        provider
      )
    ).rejects.toThrow('Block is not cached');
  });
});
