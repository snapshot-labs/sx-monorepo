import { defaultAbiCoder } from '@ethersproject/abi';
import { JsonRpcProvider } from '@ethersproject/providers';
import { describe, expect, it } from 'vitest';
import createApeGasStrategy from '../../../../src/strategies/evm/apeGas';

const L1_CHAIN_ID = 11155111;
const L3_CHAIN_ID = 33111;
const HERODORUS_CONTRACT = '0xfda8190B613497c47695F54a512a092F1216fA47';
const HERODOTUS_SATELLITE_CONTRACT =
  '0xc9854fd6034fbc41B65b454919a48a5a9b342fa8';
const VIEW_ID =
  '0x0000000000000000000000000000000000000000000000000000000000000001';
const DELEGATION_REGISTRY_CONTRACT =
  '0xdd6b74123b2ab93ad701320d3f8d1b92b4fa5202';

// Live VP setup
// 0xc4Af7180FD4BBC1E5A3e10eB82801Ab6238eB1C5 has 0.05 APE, doesn't delegate to anyone
// 0xa40839f84CF98Ee6F4fdB84c1bB1a448e7835EfE has 0.05 APE, delegates to 0xC7Ca2aC1Ae120eBa3aB42a8BF4cb071895641ceF
// 0xC7Ca2aC1Ae120eBa3aB42a8BF4cb071895641ceF has 0.1 APE, gets 0.05 APE from 0xa40839f84CF98Ee6F4fdB84c1bB1a448e7835EfE

describe('apeGas', () => {
  const metadata = {
    delegationId: VIEW_ID
  };

  const apeGasStrategy = createApeGasStrategy();

  const provider = new JsonRpcProvider('https://rpc.brovider.xyz/33111');
  const params = defaultAbiCoder.encode(
    ['uint256', 'uint256', 'address', 'address', 'bytes32', 'address'],
    [
      L1_CHAIN_ID,
      L3_CHAIN_ID,
      HERODORUS_CONTRACT,
      HERODOTUS_SATELLITE_CONTRACT,
      VIEW_ID,
      DELEGATION_REGISTRY_CONTRACT
    ]
  );

  it('should return type', () => {
    expect(apeGasStrategy.type).toBe('apeGas');
  });

  // NOTE: skipped because Herodotus API lost Curtis support
  it.skip('should return params', async () => {
    const useParams = await apeGasStrategy.getParams(
      'vote',
      { index: 0, address: '0x0', params },
      '0x537f1896541d28F4c70116EEa602b1B34Da95163',
      metadata,
      {
        space: '0xf6238F73A87D390CB00b2B380D2B777E13Fe2725',
        authenticator: '0x0',
        strategies: [],
        proposal: 8,
        choice: 1,
        metadataUri: ''
      },
      { networkConfig: {} as any, whitelistServerUrl: '', provider }
    );

    expect(useParams).toBe(
      '0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000537f1896541d28f4c70116eea602b1b34da951630000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000092e1da974c09dde0000000000000000000000000000000000000000000000000000000000000be00000000000000000000000000000000000000000000000000000000000000b01f90afeb90214f90211a0cba3815bd4fd6016ba4db7f2c2153339650bf5a60f45c6a55638c562f0ccef7ea01b3b68e5f7e3824af61d179d34b23aa143e7962af9d68fcb5de7f6eea31d454ca0f42b01d7c24142eeb530e3ef033db7e3d85dd5877d1ff5a1583b3e7e82e44f84a0a186ec7e9fbf0f042c5bf873455060556cd1608efa6cfa44336ad9fcc195f11ca030a893a9c94aedf73769df1eb34275703275505869ddaaad07163199e454da2da0fb78fda20b4f425e1defc98009c0c16a0316c5d576730406bcaee73750273fa0a0ecdbb11106c3d4f4f902ea9f061a8784d9006ac571d4f184f6a17da484642afea0bcbed774735649292c708bc1fe1b0abd78563391fc9de340dfd525f6eeb523f0a08ca91c96b16e415dd956b31adc6d31723b70a1ed76547a53c9b9d4620564fe28a0f5c343b7d0c52002fa95e714f55b6a34189602bad9376ae5eb810c39ffb59393a0377ea0af10e2006f6a2761611c21e74905ed966a0b7db7fc8c57f8096844424fa0808b8f5ec0f6a5b3af78e79d49c42ea1a6b13cf5a9a69bf1dc745296ff62beb7a07a0776f54a3a2dcafcb1cc32f28d0eb6f05adc622ea3c7a5b73bfbe9e3932216a0628b71e014667f666b278cc75b24601135926de3df2d8f377ffac03a55282548a06e32e22dc466affa4ed1dfbcdf3803fd83598f523a6e2e24bd02eb1210855fb8a0ae72ebcde12ece561dd4c06565abc84274e3f935ef91af84468214bf54e6fc0d80b90214f90211a08486bd28d3a3c7661dc2b6d92620db6150a7077da75a48181126f3c0d665a767a0d4614c79d9e846442d00cda35308acefacdd3f5dac15e3a7d6b7145ec1034289a0b829ec937ce4cef07a2656400f629f519fc3d87649ecf97f44e1a1a50ef1e28ba0d27e6c7ecd620875e90af30c492491b8f9e2a7ac49f486b24daf1309312e645da0508d6fd4cc4d982e81c83afc50db0b2e7627c32f811fb86df4beee0b270f211ba087486212c8bc2aae527a85bd4e85604f2e3f505f4b1231ed04a3d5cf38a3a59da04c7875a9921dbbcc7fecde60504f6afa4adb7ebf90a0ee1232db38240f3180bba03646777a98911359a718957528162ea83fbade1cbc275b02c3383743fadb600aa0300556d9e15606e90595ef91788e8716be451d40e38807f96515627d028d9c69a0eabd823b27ea1aae4a778a4d340856f32f162c53016351290cb89f2175bbc8dba0c7a3c1b81dbcae894c67561027fef09d2446fd66d0cd84e76441b5a845f0bca8a0b3f12ea76752cda1130b2fa8d4299b4a5399db8285029e1940f29b7aa2b87cfaa0396623983403b4dfbff490e368426864dea93460408a41d09a006139ef8c237ba0bd41385909f4d0437bc25d57b255a75e9362fd37d205f03a9475ab754971486ca00f94284a616e1daa6611b637ee81bab2271b716d9d11786c9e2a1071c97ff1b1a0ef439b8278fd4c34bf93e6a1a8273a4a662ca1b320774c6a981aebb41e2c3bd180b90214f90211a0201dfd0487d9cbd7d6baafb2ad19344460665bbc0fd500bd533b8120f380b92da0ffe2c7f21048aa318ef52d0bb846c35d0df17e1e898fb37921a3638cd900a36ea0d727496d760c5df95c21000206d958a99cdd7efcd0fdc241f739d12ae5dff84ca0f280bf614d8a5f38005ed50cd8c2a2f420864ee3959b0759b24a43c30f936e67a0e0982a46439a36cdc690e5eeb3191830c0cb15c017d97746744233896eb8979ba02c716c2df31cacd9931c2cb8d2d1e1b58d463ffc97b3ae08264a53e98745cc01a05752a716421a93abf5a4f53a5276d3a617eb629f9ad029fb6329012c9b6ae915a03a2132ff8f3721d3de7616679c3794f431b0e54e9154b79d7489542206eea50ca00d9f1e5f18fa830ec5389dabdc786b03227b3b1429542f95f2ba150bfb527f56a0bc3b07f754deba9d0a8894451e092fa9fc451048784059c22cee549c6cdd07c5a083d0b24788ae8bed8b5ba50933d699a9612369f06afa433255bce75c8133a68ea072bc4b53aa42a780211d4e60ced5dcd36cc680e4942c3d28694e9a23d3f891a1a0f21844316dabf69b0d011d5024f279fd6b3ee60b3ab3d824be116ba55b72ce2ba057a80b5bc682faffeba5c9ec44cd7cda382161f5457fa82a83ca04464a2149e8a0b1122d9b3e2db2cce51a745a546a9bb85088f06d692b3753e6e5d211a34116fba0b4784a3c20e10b3333e7419ef50e8f18eefbb7b9f45e12eca7cb01d0ef4d713780b90214f90211a0ae3746e6c87335037f91d9771f619fde0527ac7aef3ab767e198143388f24e1aa00a133007caae06a07ffc35301c949484c551d8ccc7a49ca36d9b001f20e805e3a0b9615f15b68a2ca8d1dc98181d29d6272208fa625f753a7a7ac5389b403c10cba0331300c1c98f55473b238636b52930d877252de901853dd3e4d7832949044cd9a0c697a1c0abbb4f81a5e1e48d4df8f2a7ad3ef9b07e81b2374a2b896f68954ec7a0ba91c07eed73fca02950439e59e2c5a4512c74b5cbf4abb66662a75e0fc36a95a09439c33dd3e733230738e45aa6b66a08cbe46bfc4fbe6401914933c34ab8517ba0a2372628e4a0f2b6c2fd5ad5682bf235890122ca07f4a2de43576ac6982845d4a08ee1b04daa29c0be93d1fb30977f91c8117e0d474e0627892bc5f45d5338b48ba0e8d417f82407d221f408e5bbc3274b47b06361cdc32ef4c125ad2f00010b74c3a0ff7456e5aa29732ea5a629ce8ad45349e0413d8cbe513b6f4ee7af011a891175a06ff1bb26eab236e1a575d4783fa83c7b7662b81a0b9ce5844b2da9f3d23e647ea05e0c1fb15eed6de70ad8b5fca8ebd3deed2efb926ad3c32a803aa92eeeb760b2a0b59bd1100b5ac94d75a0374712bfeb428cd2c39c209d918735ec95bf4f1075dda087d94962b0b2dd6de0a454273ff14ee03a49762ca013710feb48c6ed7d1f9183a038961d63db0c82f35e42ce44647b8de926ce34f3c54691c0e5abecd2eb5b1dbe80b90214f90211a00d9210ce84866033caf512f38e23d00e0744783d0f8997748877e571b0ddfc30a0e1bf614b0e65e0f24e5124ccb4121675918b10f847d350c039518c2142050584a0841d4b97f25967766571cfb437351f0bd92369c28e65d25fd03bd781f6e7ef24a037c86f4951b1f8be0b05597a608a721e32cc90c213ecc6b43435d0ec67be0fa5a0d473c127f17d06b94b616eb7a9f3c767ca1703bdbc3a37d9a4e19a2837eca972a0bb87d7896b0c59973f459b55f513b05cf9ddc85ff3477a9e4175d98ba5ea6fbda024e5d26b085fe32a88a63ea7ee9555605f531340f1f94db310179c0f52ab63e0a0cc89385d904223ae80a22928266546cebceac586f6f93c7553343b941e633d86a0475b39bd8bf2999a26e2ed7eb1c5957fe09ba75907926e16ccab96a356cfa4e5a030a5a7455e78082ed74e17dd146445f8c061aedc34d058d038cc467beae4e5aea0c142818785d47c9b908a6138db66e14ffc57fd77e3649e5c7f2cd57d003854f4a0f1b4aba273d5e4369ce6626956fe15cda9897d8fa4dcd3a33c0b7c791a957f3fa0f07b9f85f30f44f60a57765c844bc96f8deccbc13e6357ca5896c3107d7b72b7a037d2e41e5627480c076916937184a37e3ef7de7405c72c79d2fbf4a57c784fcfa0816ed72f979b602e1a4dd757c0ae4dc9b1fa6c97e0702bae706367baa34876cba00cf8fb137a5d1c5d23615c2f17061c09a818f99881a186f80b6fcbeb1228a29f80b889f8879e3a54ec7820fe8f82d46f7ba93025f9371033911c87263602b96047552cb6b866f8648080840bce5a888405ef5bcc80940000000000000000000000000000000000000000a056e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421a0c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000c6c4915b5aefa222df9cfa210ec4e263e27f450f0000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000005b0000000000000000000000008a2e862b9600645575b3e8ee9da7cf3ebedf53fb000000000000000000000000bc75843bd04388073a95132283fbbfad48d60b670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000258a64c852388011f15bf1f0112c33978dcf3b340000000000000000000000006ef0f2e0d422021024c137c6eb9ad092f9543a0a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f9ed8f6c1c06fdcf3f595646e64900a25710422600000000000000000000000000000000000000000000000000000000000000028000000000000000000000000000000000000000000000000000000000000003000000000000000000000000145e8fe43d87d7b407dfbfaca34225bb06ded5da000000000000000000000000a158652385f51049042888e0f547c726b1e273f90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c8bf472dbf575b242a397dcfba872ba4f2f7e497000000000000000000000000037f1896541d28f4c70116eea602b1b34da95163800000000000000000000000000000000000000000000000000000000000009a'
    );
  });

  // NOTE: skipped because Herodotus API lost Curtis support
  it.skip('should compute voting power for user with delegated APE gas at specific timestamp', async () => {
    const votingPower = await apeGasStrategy.getVotingPower(
      '0x8E7083D3D0174Fe7f33821b2b4bDFE0fEE9C8e87',
      '0x537f1896541d28F4c70116EEa602b1B34Da95163',
      metadata,
      8482198,
      params,
      provider
    );

    expect(votingPower.toString()).toEqual('1652112965448993573');
  });

  it('should compute live voting power for user with own APE gas at null block', async () => {
    const votingPower = await apeGasStrategy.getVotingPower(
      '0x8E7083D3D0174Fe7f33821b2b4bDFE0fEE9C8e87',
      '0xc4Af7180FD4BBC1E5A3e10eB82801Ab6238eB1C5',
      metadata,
      null,
      params,
      provider
    );

    expect(votingPower > 500000000000000n).toBe(true);
    expect(votingPower < 550000000000000n).toBe(true);
  });

  it('should compute live voting power for user that receives delegated gas at null block', async () => {
    const votingPower = await apeGasStrategy.getVotingPower(
      '0x8E7083D3D0174Fe7f33821b2b4bDFE0fEE9C8e87',
      '0xC7Ca2aC1Ae120eBa3aB42a8BF4cb071895641ceF',
      metadata,
      null,
      params,
      provider
    );

    expect(votingPower > 149999267997822587n).toBe(true);
    expect(votingPower < 155000000000000000n).toBe(true);
  });

  it('should return 0 live voting power for user that delegates gas to someone at null block', async () => {
    const votingPower = await apeGasStrategy.getVotingPower(
      '0x8E7083D3D0174Fe7f33821b2b4bDFE0fEE9C8e87',
      '0xa40839f84CF98Ee6F4fdB84c1bB1a448e7835EfE',
      metadata,
      null,
      params,
      provider
    );

    expect(votingPower.toString()).toBe('0');
  });

  // NOTE: skipped because Herodotus API is down
  it.skip('should throw when requesting unknown block', () => {
    expect(
      apeGasStrategy.getVotingPower(
        '0x8E7083D3D0174Fe7f33821b2b4bDFE0fEE9C8e87',
        '0xfede39f346c1c65d07f2fa476d5f4727a0d7dc43',
        metadata,
        50000,
        params,
        provider
      )
    ).rejects.toThrow('Block is not cached');
  });
});
