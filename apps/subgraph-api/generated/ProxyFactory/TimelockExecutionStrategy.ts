// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProposalExecuted extends ethereum.Event {
  get params(): ProposalExecuted__Params {
    return new ProposalExecuted__Params(this);
  }
}

export class ProposalExecuted__Params {
  _event: ProposalExecuted;

  constructor(event: ProposalExecuted) {
    this._event = event;
  }

  get executionPayloadHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class ProposalQueued extends ethereum.Event {
  get params(): ProposalQueued__Params {
    return new ProposalQueued__Params(this);
  }
}

export class ProposalQueued__Params {
  _event: ProposalQueued;

  constructor(event: ProposalQueued) {
    this._event = event;
  }

  get executionPayloadHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class ProposalVetoed extends ethereum.Event {
  get params(): ProposalVetoed__Params {
    return new ProposalVetoed__Params(this);
  }
}

export class ProposalVetoed__Params {
  _event: ProposalVetoed;

  constructor(event: ProposalVetoed) {
    this._event = event;
  }

  get executionPayloadHash(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class QuorumUpdated extends ethereum.Event {
  get params(): QuorumUpdated__Params {
    return new QuorumUpdated__Params(this);
  }
}

export class QuorumUpdated__Params {
  _event: QuorumUpdated;

  constructor(event: QuorumUpdated) {
    this._event = event;
  }

  get newQuorum(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SpaceDisabled extends ethereum.Event {
  get params(): SpaceDisabled__Params {
    return new SpaceDisabled__Params(this);
  }
}

export class SpaceDisabled__Params {
  _event: SpaceDisabled;

  constructor(event: SpaceDisabled) {
    this._event = event;
  }

  get space(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SpaceEnabled extends ethereum.Event {
  get params(): SpaceEnabled__Params {
    return new SpaceEnabled__Params(this);
  }
}

export class SpaceEnabled__Params {
  _event: SpaceEnabled;

  constructor(event: SpaceEnabled) {
    this._event = event;
  }

  get space(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TimelockDelaySet extends ethereum.Event {
  get params(): TimelockDelaySet__Params {
    return new TimelockDelaySet__Params(this);
  }
}

export class TimelockDelaySet__Params {
  _event: TimelockDelaySet;

  constructor(event: TimelockDelaySet) {
    this._event = event;
  }

  get timelockDelay(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newTimelockDelay(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TimelockExecutionStrategySetUp extends ethereum.Event {
  get params(): TimelockExecutionStrategySetUp__Params {
    return new TimelockExecutionStrategySetUp__Params(this);
  }
}

export class TimelockExecutionStrategySetUp__Params {
  _event: TimelockExecutionStrategySetUp;

  constructor(event: TimelockExecutionStrategySetUp) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vetoGuardian(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get spaces(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get quorum(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get timelockDelay(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class TransactionExecuted extends ethereum.Event {
  get params(): TransactionExecuted__Params {
    return new TransactionExecuted__Params(this);
  }
}

export class TransactionExecuted__Params {
  _event: TransactionExecuted;

  constructor(event: TransactionExecuted) {
    this._event = event;
  }

  get transaction(): TransactionExecutedTransactionStruct {
    return changetype<TransactionExecutedTransactionStruct>(
      this._event.parameters[0].value.toTuple(),
    );
  }
}

export class TransactionExecutedTransactionStruct extends ethereum.Tuple {
  get to(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get data(): Bytes {
    return this[2].toBytes();
  }

  get operation(): i32 {
    return this[3].toI32();
  }

  get salt(): BigInt {
    return this[4].toBigInt();
  }
}

export class TransactionQueued extends ethereum.Event {
  get params(): TransactionQueued__Params {
    return new TransactionQueued__Params(this);
  }
}

export class TransactionQueued__Params {
  _event: TransactionQueued;

  constructor(event: TransactionQueued) {
    this._event = event;
  }

  get transaction(): TransactionQueuedTransactionStruct {
    return changetype<TransactionQueuedTransactionStruct>(
      this._event.parameters[0].value.toTuple(),
    );
  }

  get executionTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TransactionQueuedTransactionStruct extends ethereum.Tuple {
  get to(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }

  get data(): Bytes {
    return this[2].toBytes();
  }

  get operation(): i32 {
    return this[3].toI32();
  }

  get salt(): BigInt {
    return this[4].toBigInt();
  }
}

export class VetoGuardianSet extends ethereum.Event {
  get params(): VetoGuardianSet__Params {
    return new VetoGuardianSet__Params(this);
  }
}

export class VetoGuardianSet__Params {
  _event: VetoGuardianSet;

  constructor(event: VetoGuardianSet) {
    this._event = event;
  }

  get vetoGuardian(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newVetoGuardian(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TimelockExecutionStrategy__getProposalStatusInputProposalStruct extends ethereum.Tuple {
  get author(): Address {
    return this[0].toAddress();
  }

  get startBlockNumber(): BigInt {
    return this[1].toBigInt();
  }

  get executionStrategy(): Address {
    return this[2].toAddress();
  }

  get minEndBlockNumber(): BigInt {
    return this[3].toBigInt();
  }

  get maxEndBlockNumber(): BigInt {
    return this[4].toBigInt();
  }

  get finalizationStatus(): i32 {
    return this[5].toI32();
  }

  get executionPayloadHash(): Bytes {
    return this[6].toBytes();
  }

  get activeVotingStrategies(): BigInt {
    return this[7].toBigInt();
  }
}

export class TimelockExecutionStrategy extends ethereum.SmartContract {
  static bind(address: Address): TimelockExecutionStrategy {
    return new TimelockExecutionStrategy("TimelockExecutionStrategy", address);
  }

  getProposalStatus(
    proposal: TimelockExecutionStrategy__getProposalStatusInputProposalStruct,
    votesFor: BigInt,
    votesAgainst: BigInt,
    votesAbstain: BigInt,
  ): i32 {
    let result = super.call(
      "getProposalStatus",
      "getProposalStatus((address,uint32,address,uint32,uint32,uint8,bytes32,uint256),uint256,uint256,uint256):(uint8)",
      [
        ethereum.Value.fromTuple(proposal),
        ethereum.Value.fromUnsignedBigInt(votesFor),
        ethereum.Value.fromUnsignedBigInt(votesAgainst),
        ethereum.Value.fromUnsignedBigInt(votesAbstain),
      ],
    );

    return result[0].toI32();
  }

  try_getProposalStatus(
    proposal: TimelockExecutionStrategy__getProposalStatusInputProposalStruct,
    votesFor: BigInt,
    votesAgainst: BigInt,
    votesAbstain: BigInt,
  ): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getProposalStatus",
      "getProposalStatus((address,uint32,address,uint32,uint32,uint8,bytes32,uint256),uint256,uint256,uint256):(uint8)",
      [
        ethereum.Value.fromTuple(proposal),
        ethereum.Value.fromUnsignedBigInt(votesFor),
        ethereum.Value.fromUnsignedBigInt(votesAgainst),
        ethereum.Value.fromUnsignedBigInt(votesAbstain),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getStrategyType(): string {
    let result = super.call(
      "getStrategyType",
      "getStrategyType():(string)",
      [],
    );

    return result[0].toString();
  }

  try_getStrategyType(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getStrategyType",
      "getStrategyType():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  isSpaceEnabled(space: Address): BigInt {
    let result = super.call(
      "isSpaceEnabled",
      "isSpaceEnabled(address):(uint256)",
      [ethereum.Value.fromAddress(space)],
    );

    return result[0].toBigInt();
  }

  try_isSpaceEnabled(space: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "isSpaceEnabled",
      "isSpaceEnabled(address):(uint256)",
      [ethereum.Value.fromAddress(space)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proposalExecutionTime(param0: Bytes): BigInt {
    let result = super.call(
      "proposalExecutionTime",
      "proposalExecutionTime(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return result[0].toBigInt();
  }

  try_proposalExecutionTime(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalExecutionTime",
      "proposalExecutionTime(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  quorum(): BigInt {
    let result = super.call("quorum", "quorum():(uint256)", []);

    return result[0].toBigInt();
  }

  try_quorum(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("quorum", "quorum():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  timelockDelay(): BigInt {
    let result = super.call("timelockDelay", "timelockDelay():(uint256)", []);

    return result[0].toBigInt();
  }

  try_timelockDelay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timelockDelay",
      "timelockDelay():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vetoGuardian(): Address {
    let result = super.call("vetoGuardian", "vetoGuardian():(address)", []);

    return result[0].toAddress();
  }

  try_vetoGuardian(): ethereum.CallResult<Address> {
    let result = super.tryCall("vetoGuardian", "vetoGuardian():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DisableSpaceCall extends ethereum.Call {
  get inputs(): DisableSpaceCall__Inputs {
    return new DisableSpaceCall__Inputs(this);
  }

  get outputs(): DisableSpaceCall__Outputs {
    return new DisableSpaceCall__Outputs(this);
  }
}

export class DisableSpaceCall__Inputs {
  _call: DisableSpaceCall;

  constructor(call: DisableSpaceCall) {
    this._call = call;
  }

  get space(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DisableSpaceCall__Outputs {
  _call: DisableSpaceCall;

  constructor(call: DisableSpaceCall) {
    this._call = call;
  }
}

export class EnableSpaceCall extends ethereum.Call {
  get inputs(): EnableSpaceCall__Inputs {
    return new EnableSpaceCall__Inputs(this);
  }

  get outputs(): EnableSpaceCall__Outputs {
    return new EnableSpaceCall__Outputs(this);
  }
}

export class EnableSpaceCall__Inputs {
  _call: EnableSpaceCall;

  constructor(call: EnableSpaceCall) {
    this._call = call;
  }

  get space(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class EnableSpaceCall__Outputs {
  _call: EnableSpaceCall;

  constructor(call: EnableSpaceCall) {
    this._call = call;
  }
}

export class ExecuteCall extends ethereum.Call {
  get inputs(): ExecuteCall__Inputs {
    return new ExecuteCall__Inputs(this);
  }

  get outputs(): ExecuteCall__Outputs {
    return new ExecuteCall__Outputs(this);
  }
}

export class ExecuteCall__Inputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }

  get proposalId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get proposal(): ExecuteCallProposalStruct {
    return changetype<ExecuteCallProposalStruct>(
      this._call.inputValues[1].value.toTuple(),
    );
  }

  get votesFor(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get votesAgainst(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get votesAbstain(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get payload(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class ExecuteCall__Outputs {
  _call: ExecuteCall;

  constructor(call: ExecuteCall) {
    this._call = call;
  }
}

export class ExecuteCallProposalStruct extends ethereum.Tuple {
  get author(): Address {
    return this[0].toAddress();
  }

  get startBlockNumber(): BigInt {
    return this[1].toBigInt();
  }

  get executionStrategy(): Address {
    return this[2].toAddress();
  }

  get minEndBlockNumber(): BigInt {
    return this[3].toBigInt();
  }

  get maxEndBlockNumber(): BigInt {
    return this[4].toBigInt();
  }

  get finalizationStatus(): i32 {
    return this[5].toI32();
  }

  get executionPayloadHash(): Bytes {
    return this[6].toBytes();
  }

  get activeVotingStrategies(): BigInt {
    return this[7].toBigInt();
  }
}

export class ExecuteQueuedProposalCall extends ethereum.Call {
  get inputs(): ExecuteQueuedProposalCall__Inputs {
    return new ExecuteQueuedProposalCall__Inputs(this);
  }

  get outputs(): ExecuteQueuedProposalCall__Outputs {
    return new ExecuteQueuedProposalCall__Outputs(this);
  }
}

export class ExecuteQueuedProposalCall__Inputs {
  _call: ExecuteQueuedProposalCall;

  constructor(call: ExecuteQueuedProposalCall) {
    this._call = call;
  }

  get payload(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ExecuteQueuedProposalCall__Outputs {
  _call: ExecuteQueuedProposalCall;

  constructor(call: ExecuteQueuedProposalCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetQuorumCall extends ethereum.Call {
  get inputs(): SetQuorumCall__Inputs {
    return new SetQuorumCall__Inputs(this);
  }

  get outputs(): SetQuorumCall__Outputs {
    return new SetQuorumCall__Outputs(this);
  }
}

export class SetQuorumCall__Inputs {
  _call: SetQuorumCall;

  constructor(call: SetQuorumCall) {
    this._call = call;
  }

  get _quorum(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetQuorumCall__Outputs {
  _call: SetQuorumCall;

  constructor(call: SetQuorumCall) {
    this._call = call;
  }
}

export class SetTimelockDelayCall extends ethereum.Call {
  get inputs(): SetTimelockDelayCall__Inputs {
    return new SetTimelockDelayCall__Inputs(this);
  }

  get outputs(): SetTimelockDelayCall__Outputs {
    return new SetTimelockDelayCall__Outputs(this);
  }
}

export class SetTimelockDelayCall__Inputs {
  _call: SetTimelockDelayCall;

  constructor(call: SetTimelockDelayCall) {
    this._call = call;
  }

  get newTimelockDelay(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTimelockDelayCall__Outputs {
  _call: SetTimelockDelayCall;

  constructor(call: SetTimelockDelayCall) {
    this._call = call;
  }
}

export class SetUpCall extends ethereum.Call {
  get inputs(): SetUpCall__Inputs {
    return new SetUpCall__Inputs(this);
  }

  get outputs(): SetUpCall__Outputs {
    return new SetUpCall__Outputs(this);
  }
}

export class SetUpCall__Inputs {
  _call: SetUpCall;

  constructor(call: SetUpCall) {
    this._call = call;
  }

  get initParams(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class SetUpCall__Outputs {
  _call: SetUpCall;

  constructor(call: SetUpCall) {
    this._call = call;
  }
}

export class SetVetoGuardianCall extends ethereum.Call {
  get inputs(): SetVetoGuardianCall__Inputs {
    return new SetVetoGuardianCall__Inputs(this);
  }

  get outputs(): SetVetoGuardianCall__Outputs {
    return new SetVetoGuardianCall__Outputs(this);
  }
}

export class SetVetoGuardianCall__Inputs {
  _call: SetVetoGuardianCall;

  constructor(call: SetVetoGuardianCall) {
    this._call = call;
  }

  get newVetoGuardian(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVetoGuardianCall__Outputs {
  _call: SetVetoGuardianCall;

  constructor(call: SetVetoGuardianCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class VetoCall extends ethereum.Call {
  get inputs(): VetoCall__Inputs {
    return new VetoCall__Inputs(this);
  }

  get outputs(): VetoCall__Outputs {
    return new VetoCall__Outputs(this);
  }
}

export class VetoCall__Inputs {
  _call: VetoCall;

  constructor(call: VetoCall) {
    this._call = call;
  }

  get executionPayloadHash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class VetoCall__Outputs {
  _call: VetoCall;

  constructor(call: VetoCall) {
    this._call = call;
  }
}
