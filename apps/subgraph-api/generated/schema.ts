// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Space extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Space entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Space must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Space", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Space | null {
    return changetype<Space | null>(store.get_in_block("Space", id));
  }

  static load(id: string): Space | null {
    return changetype<Space | null>(store.get("Space", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get verified(): boolean {
    let value = this.get("verified");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set verified(value: boolean) {
    this.set("verified", Value.fromBoolean(value));
  }

  get turbo(): boolean {
    let value = this.get("turbo");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set turbo(value: boolean) {
    this.set("turbo", Value.fromBoolean(value));
  }

  get metadata(): string | null {
    let value = this.get("metadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set metadata(value: string | null) {
    if (!value) {
      this.unset("metadata");
    } else {
      this.set("metadata", Value.fromString(<string>value));
    }
  }

  get controller(): string {
    let value = this.get("controller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set controller(value: string) {
    this.set("controller", Value.fromString(value));
  }

  get voting_delay(): i32 {
    let value = this.get("voting_delay");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set voting_delay(value: i32) {
    this.set("voting_delay", Value.fromI32(value));
  }

  get min_voting_period(): i32 {
    let value = this.get("min_voting_period");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set min_voting_period(value: i32) {
    this.set("min_voting_period", Value.fromI32(value));
  }

  get max_voting_period(): i32 {
    let value = this.get("max_voting_period");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set max_voting_period(value: i32) {
    this.set("max_voting_period", Value.fromI32(value));
  }

  get proposal_threshold(): BigDecimal {
    let value = this.get("proposal_threshold");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set proposal_threshold(value: BigDecimal) {
    this.set("proposal_threshold", Value.fromBigDecimal(value));
  }

  get quorum(): BigDecimal {
    let value = this.get("quorum");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set quorum(value: BigDecimal) {
    this.set("quorum", Value.fromBigDecimal(value));
  }

  get next_strategy_index(): i32 {
    let value = this.get("next_strategy_index");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set next_strategy_index(value: i32) {
    this.set("next_strategy_index", Value.fromI32(value));
  }

  get strategies_indices(): Array<i32> {
    let value = this.get("strategies_indices");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toI32Array();
    }
  }

  set strategies_indices(value: Array<i32>) {
    this.set("strategies_indices", Value.fromI32Array(value));
  }

  get strategies_indicies(): Array<i32> {
    let value = this.get("strategies_indicies");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toI32Array();
    }
  }

  set strategies_indicies(value: Array<i32>) {
    this.set("strategies_indicies", Value.fromI32Array(value));
  }

  get strategies(): Array<string> {
    let value = this.get("strategies");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set strategies(value: Array<string>) {
    this.set("strategies", Value.fromStringArray(value));
  }

  get strategies_params(): Array<string> {
    let value = this.get("strategies_params");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set strategies_params(value: Array<string>) {
    this.set("strategies_params", Value.fromStringArray(value));
  }

  get strategies_metadata(): Array<string> {
    let value = this.get("strategies_metadata");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set strategies_metadata(value: Array<string>) {
    this.set("strategies_metadata", Value.fromStringArray(value));
  }

  get strategies_parsed_metadata(): StrategiesParsedMetadataLoader {
    return new StrategiesParsedMetadataLoader(
      "Space",
      this.get("id")!.toString(),
      "strategies_parsed_metadata",
    );
  }

  get authenticators(): Array<string> {
    let value = this.get("authenticators");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set authenticators(value: Array<string>) {
    this.set("authenticators", Value.fromStringArray(value));
  }

  get validation_strategy(): string {
    let value = this.get("validation_strategy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set validation_strategy(value: string) {
    this.set("validation_strategy", Value.fromString(value));
  }

  get validation_strategy_params(): string {
    let value = this.get("validation_strategy_params");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set validation_strategy_params(value: string) {
    this.set("validation_strategy_params", Value.fromString(value));
  }

  get voting_power_validation_strategy_strategies(): Array<string> {
    let value = this.get("voting_power_validation_strategy_strategies");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set voting_power_validation_strategy_strategies(value: Array<string>) {
    this.set(
      "voting_power_validation_strategy_strategies",
      Value.fromStringArray(value),
    );
  }

  get voting_power_validation_strategy_strategies_params(): Array<string> {
    let value = this.get("voting_power_validation_strategy_strategies_params");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set voting_power_validation_strategy_strategies_params(value: Array<string>) {
    this.set(
      "voting_power_validation_strategy_strategies_params",
      Value.fromStringArray(value),
    );
  }

  get voting_power_validation_strategy_metadata(): string {
    let value = this.get("voting_power_validation_strategy_metadata");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set voting_power_validation_strategy_metadata(value: string) {
    this.set(
      "voting_power_validation_strategy_metadata",
      Value.fromString(value),
    );
  }

  get voting_power_validation_strategies_parsed_metadata(): VotingPowerValidationStrategiesParsedMetadataLoader {
    return new VotingPowerValidationStrategiesParsedMetadataLoader(
      "Space",
      this.get("id")!.toString(),
      "voting_power_validation_strategies_parsed_metadata",
    );
  }

  get proposal_count(): i32 {
    let value = this.get("proposal_count");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set proposal_count(value: i32) {
    this.set("proposal_count", Value.fromI32(value));
  }

  get vote_count(): i32 {
    let value = this.get("vote_count");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set vote_count(value: i32) {
    this.set("vote_count", Value.fromI32(value));
  }

  get proposer_count(): i32 {
    let value = this.get("proposer_count");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set proposer_count(value: i32) {
    this.set("proposer_count", Value.fromI32(value));
  }

  get voter_count(): i32 {
    let value = this.get("voter_count");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set voter_count(value: i32) {
    this.set("voter_count", Value.fromI32(value));
  }

  get created(): i32 {
    let value = this.get("created");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set created(value: i32) {
    this.set("created", Value.fromI32(value));
  }

  get tx(): Bytes {
    let value = this.get("tx");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tx(value: Bytes) {
    this.set("tx", Value.fromBytes(value));
  }
}

export class SpaceMetadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SpaceMetadata entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SpaceMetadata must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("SpaceMetadata", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SpaceMetadata | null {
    return changetype<SpaceMetadata | null>(
      store.get_in_block("SpaceMetadata", id),
    );
  }

  static load(id: string): SpaceMetadata | null {
    return changetype<SpaceMetadata | null>(store.get("SpaceMetadata", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get about(): string {
    let value = this.get("about");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set about(value: string) {
    this.set("about", Value.fromString(value));
  }

  get avatar(): string {
    let value = this.get("avatar");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set avatar(value: string) {
    this.set("avatar", Value.fromString(value));
  }

  get cover(): string {
    let value = this.get("cover");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set cover(value: string) {
    this.set("cover", Value.fromString(value));
  }

  get external_url(): string {
    let value = this.get("external_url");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set external_url(value: string) {
    this.set("external_url", Value.fromString(value));
  }

  get treasuries(): Array<string> {
    let value = this.get("treasuries");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set treasuries(value: Array<string>) {
    this.set("treasuries", Value.fromStringArray(value));
  }

  get labels(): Array<string> {
    let value = this.get("labels");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set labels(value: Array<string>) {
    this.set("labels", Value.fromStringArray(value));
  }

  get delegations(): Array<string> {
    let value = this.get("delegations");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set delegations(value: Array<string>) {
    this.set("delegations", Value.fromStringArray(value));
  }

  get github(): string {
    let value = this.get("github");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set github(value: string) {
    this.set("github", Value.fromString(value));
  }

  get twitter(): string {
    let value = this.get("twitter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set twitter(value: string) {
    this.set("twitter", Value.fromString(value));
  }

  get discord(): string {
    let value = this.get("discord");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set discord(value: string) {
    this.set("discord", Value.fromString(value));
  }

  get voting_power_symbol(): string {
    let value = this.get("voting_power_symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set voting_power_symbol(value: string) {
    this.set("voting_power_symbol", Value.fromString(value));
  }

  get wallet(): string {
    let value = this.get("wallet");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set wallet(value: string) {
    this.set("wallet", Value.fromString(value));
  }

  get executors(): Array<string> {
    let value = this.get("executors");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set executors(value: Array<string>) {
    this.set("executors", Value.fromStringArray(value));
  }

  get executors_types(): Array<string> {
    let value = this.get("executors_types");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set executors_types(value: Array<string>) {
    this.set("executors_types", Value.fromStringArray(value));
  }

  get executors_destinations(): Array<string> {
    let value = this.get("executors_destinations");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set executors_destinations(value: Array<string>) {
    this.set("executors_destinations", Value.fromStringArray(value));
  }

  get executors_strategies(): Array<string> {
    let value = this.get("executors_strategies");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set executors_strategies(value: Array<string>) {
    this.set("executors_strategies", Value.fromStringArray(value));
  }
}

export class StrategiesParsedMetadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save StrategiesParsedMetadata entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type StrategiesParsedMetadata must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("StrategiesParsedMetadata", id.toString(), this);
    }
  }

  static loadInBlock(id: string): StrategiesParsedMetadata | null {
    return changetype<StrategiesParsedMetadata | null>(
      store.get_in_block("StrategiesParsedMetadata", id),
    );
  }

  static load(id: string): StrategiesParsedMetadata | null {
    return changetype<StrategiesParsedMetadata | null>(
      store.get("StrategiesParsedMetadata", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get space(): string {
    let value = this.get("space");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set space(value: string) {
    this.set("space", Value.fromString(value));
  }

  get index(): i32 {
    let value = this.get("index");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set index(value: i32) {
    this.set("index", Value.fromI32(value));
  }

  get data(): string | null {
    let value = this.get("data");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set data(value: string | null) {
    if (!value) {
      this.unset("data");
    } else {
      this.set("data", Value.fromString(<string>value));
    }
  }
}

export class VotingPowerValidationStrategiesParsedMetadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save VotingPowerValidationStrategiesParsedMetadata entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VotingPowerValidationStrategiesParsedMetadata must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set(
        "VotingPowerValidationStrategiesParsedMetadata",
        id.toString(),
        this,
      );
    }
  }

  static loadInBlock(
    id: string,
  ): VotingPowerValidationStrategiesParsedMetadata | null {
    return changetype<VotingPowerValidationStrategiesParsedMetadata | null>(
      store.get_in_block("VotingPowerValidationStrategiesParsedMetadata", id),
    );
  }

  static load(
    id: string,
  ): VotingPowerValidationStrategiesParsedMetadata | null {
    return changetype<VotingPowerValidationStrategiesParsedMetadata | null>(
      store.get("VotingPowerValidationStrategiesParsedMetadata", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get space(): string {
    let value = this.get("space");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set space(value: string) {
    this.set("space", Value.fromString(value));
  }

  get index(): i32 {
    let value = this.get("index");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set index(value: i32) {
    this.set("index", Value.fromI32(value));
  }

  get data(): string | null {
    let value = this.get("data");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set data(value: string | null) {
    if (!value) {
      this.unset("data");
    } else {
      this.set("data", Value.fromString(<string>value));
    }
  }
}

export class StrategiesParsedMetadataData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save StrategiesParsedMetadataData entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type StrategiesParsedMetadataData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("StrategiesParsedMetadataData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): StrategiesParsedMetadataData | null {
    return changetype<StrategiesParsedMetadataData | null>(
      store.get_in_block("StrategiesParsedMetadataData", id),
    );
  }

  static load(id: string): StrategiesParsedMetadataData | null {
    return changetype<StrategiesParsedMetadataData | null>(
      store.get("StrategiesParsedMetadataData", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get payload(): string | null {
    let value = this.get("payload");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set payload(value: string | null) {
    if (!value) {
      this.unset("payload");
    } else {
      this.set("payload", Value.fromString(<string>value));
    }
  }
}

export class ExecutionStrategy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExecutionStrategy entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExecutionStrategy must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ExecutionStrategy", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ExecutionStrategy | null {
    return changetype<ExecutionStrategy | null>(
      store.get_in_block("ExecutionStrategy", id),
    );
  }

  static load(id: string): ExecutionStrategy | null {
    return changetype<ExecutionStrategy | null>(
      store.get("ExecutionStrategy", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get destination_address(): string | null {
    let value = this.get("destination_address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set destination_address(value: string | null) {
    if (!value) {
      this.unset("destination_address");
    } else {
      this.set("destination_address", Value.fromString(<string>value));
    }
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get quorum(): BigDecimal {
    let value = this.get("quorum");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set quorum(value: BigDecimal) {
    this.set("quorum", Value.fromBigDecimal(value));
  }

  get treasury(): string | null {
    let value = this.get("treasury");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set treasury(value: string | null) {
    if (!value) {
      this.unset("treasury");
    } else {
      this.set("treasury", Value.fromString(<string>value));
    }
  }

  get treasury_chain(): i32 {
    let value = this.get("treasury_chain");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set treasury_chain(value: i32) {
    this.set("treasury_chain", Value.fromI32(value));
  }

  get timelock_veto_guardian(): string | null {
    let value = this.get("timelock_veto_guardian");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set timelock_veto_guardian(value: string | null) {
    if (!value) {
      this.unset("timelock_veto_guardian");
    } else {
      this.set("timelock_veto_guardian", Value.fromString(<string>value));
    }
  }

  get timelock_delay(): BigInt {
    let value = this.get("timelock_delay");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timelock_delay(value: BigInt) {
    this.set("timelock_delay", Value.fromBigInt(value));
  }

  get axiom_snapshot_address(): string | null {
    let value = this.get("axiom_snapshot_address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set axiom_snapshot_address(value: string | null) {
    if (!value) {
      this.unset("axiom_snapshot_address");
    } else {
      this.set("axiom_snapshot_address", Value.fromString(<string>value));
    }
  }

  get axiom_snapshot_slot(): BigInt | null {
    let value = this.get("axiom_snapshot_slot");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set axiom_snapshot_slot(value: BigInt | null) {
    if (!value) {
      this.unset("axiom_snapshot_slot");
    } else {
      this.set("axiom_snapshot_slot", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ExecutionHash extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExecutionHash entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ExecutionHash must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ExecutionHash", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ExecutionHash | null {
    return changetype<ExecutionHash | null>(
      store.get_in_block("ExecutionHash", id),
    );
  }

  static load(id: string): ExecutionHash | null {
    return changetype<ExecutionHash | null>(store.get("ExecutionHash", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposal_id(): string {
    let value = this.get("proposal_id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set proposal_id(value: string) {
    this.set("proposal_id", Value.fromString(value));
  }
}

export class Proposal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Proposal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Proposal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Proposal", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Proposal | null {
    return changetype<Proposal | null>(store.get_in_block("Proposal", id));
  }

  static load(id: string): Proposal | null {
    return changetype<Proposal | null>(store.get("Proposal", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proposal_id(): i32 {
    let value = this.get("proposal_id");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set proposal_id(value: i32) {
    this.set("proposal_id", Value.fromI32(value));
  }

  get space(): string {
    let value = this.get("space");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set space(value: string) {
    this.set("space", Value.fromString(value));
  }

  get author(): string {
    let value = this.get("author");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set author(value: string) {
    this.set("author", Value.fromString(value));
  }

  get execution_hash(): string {
    let value = this.get("execution_hash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set execution_hash(value: string) {
    this.set("execution_hash", Value.fromString(value));
  }

  get metadata(): string | null {
    let value = this.get("metadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set metadata(value: string | null) {
    if (!value) {
      this.unset("metadata");
    } else {
      this.set("metadata", Value.fromString(<string>value));
    }
  }

  get start(): i32 {
    let value = this.get("start");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set start(value: i32) {
    this.set("start", Value.fromI32(value));
  }

  get min_end(): i32 {
    let value = this.get("min_end");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set min_end(value: i32) {
    this.set("min_end", Value.fromI32(value));
  }

  get max_end(): i32 {
    let value = this.get("max_end");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set max_end(value: i32) {
    this.set("max_end", Value.fromI32(value));
  }

  get snapshot(): i32 {
    let value = this.get("snapshot");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set snapshot(value: i32) {
    this.set("snapshot", Value.fromI32(value));
  }

  get execution_time(): i32 {
    let value = this.get("execution_time");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set execution_time(value: i32) {
    this.set("execution_time", Value.fromI32(value));
  }

  get execution_strategy(): string {
    let value = this.get("execution_strategy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set execution_strategy(value: string) {
    this.set("execution_strategy", Value.fromString(value));
  }

  get execution_strategy_type(): string {
    let value = this.get("execution_strategy_type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set execution_strategy_type(value: string) {
    this.set("execution_strategy_type", Value.fromString(value));
  }

  get execution_destination(): string | null {
    let value = this.get("execution_destination");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set execution_destination(value: string | null) {
    if (!value) {
      this.unset("execution_destination");
    } else {
      this.set("execution_destination", Value.fromString(<string>value));
    }
  }

  get timelock_veto_guardian(): string | null {
    let value = this.get("timelock_veto_guardian");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set timelock_veto_guardian(value: string | null) {
    if (!value) {
      this.unset("timelock_veto_guardian");
    } else {
      this.set("timelock_veto_guardian", Value.fromString(<string>value));
    }
  }

  get timelock_delay(): BigInt {
    let value = this.get("timelock_delay");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timelock_delay(value: BigInt) {
    this.set("timelock_delay", Value.fromBigInt(value));
  }

  get axiom_snapshot_address(): string | null {
    let value = this.get("axiom_snapshot_address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set axiom_snapshot_address(value: string | null) {
    if (!value) {
      this.unset("axiom_snapshot_address");
    } else {
      this.set("axiom_snapshot_address", Value.fromString(<string>value));
    }
  }

  get axiom_snapshot_slot(): BigInt | null {
    let value = this.get("axiom_snapshot_slot");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set axiom_snapshot_slot(value: BigInt | null) {
    if (!value) {
      this.unset("axiom_snapshot_slot");
    } else {
      this.set("axiom_snapshot_slot", Value.fromBigInt(<BigInt>value));
    }
  }

  get strategies_indices(): Array<i32> {
    let value = this.get("strategies_indices");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toI32Array();
    }
  }

  set strategies_indices(value: Array<i32>) {
    this.set("strategies_indices", Value.fromI32Array(value));
  }

  get strategies_indicies(): Array<i32> {
    let value = this.get("strategies_indicies");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toI32Array();
    }
  }

  set strategies_indicies(value: Array<i32>) {
    this.set("strategies_indicies", Value.fromI32Array(value));
  }

  get strategies(): Array<string> {
    let value = this.get("strategies");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set strategies(value: Array<string>) {
    this.set("strategies", Value.fromStringArray(value));
  }

  get strategies_params(): Array<string> {
    let value = this.get("strategies_params");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set strategies_params(value: Array<string>) {
    this.set("strategies_params", Value.fromStringArray(value));
  }

  get type(): string {
    let value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get scores_1(): BigDecimal {
    let value = this.get("scores_1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set scores_1(value: BigDecimal) {
    this.set("scores_1", Value.fromBigDecimal(value));
  }

  get scores_2(): BigDecimal {
    let value = this.get("scores_2");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set scores_2(value: BigDecimal) {
    this.set("scores_2", Value.fromBigDecimal(value));
  }

  get scores_3(): BigDecimal {
    let value = this.get("scores_3");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set scores_3(value: BigDecimal) {
    this.set("scores_3", Value.fromBigDecimal(value));
  }

  get scores_total(): BigDecimal {
    let value = this.get("scores_total");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set scores_total(value: BigDecimal) {
    this.set("scores_total", Value.fromBigDecimal(value));
  }

  get quorum(): BigDecimal {
    let value = this.get("quorum");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set quorum(value: BigDecimal) {
    this.set("quorum", Value.fromBigDecimal(value));
  }

  get created(): i32 {
    let value = this.get("created");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set created(value: i32) {
    this.set("created", Value.fromI32(value));
  }

  get edited(): i32 {
    let value = this.get("edited");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set edited(value: i32) {
    this.set("edited", Value.fromI32(value));
  }

  get tx(): Bytes {
    let value = this.get("tx");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tx(value: Bytes) {
    this.set("tx", Value.fromBytes(value));
  }

  get execution_tx(): Bytes | null {
    let value = this.get("execution_tx");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set execution_tx(value: Bytes | null) {
    if (!value) {
      this.unset("execution_tx");
    } else {
      this.set("execution_tx", Value.fromBytes(<Bytes>value));
    }
  }

  get veto_tx(): Bytes | null {
    let value = this.get("veto_tx");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set veto_tx(value: Bytes | null) {
    if (!value) {
      this.unset("veto_tx");
    } else {
      this.set("veto_tx", Value.fromBytes(<Bytes>value));
    }
  }

  get vote_count(): i32 {
    let value = this.get("vote_count");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set vote_count(value: i32) {
    this.set("vote_count", Value.fromI32(value));
  }

  get execution_ready(): boolean {
    let value = this.get("execution_ready");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set execution_ready(value: boolean) {
    this.set("execution_ready", Value.fromBoolean(value));
  }

  get executed(): boolean {
    let value = this.get("executed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set executed(value: boolean) {
    this.set("executed", Value.fromBoolean(value));
  }

  get vetoed(): boolean {
    let value = this.get("vetoed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set vetoed(value: boolean) {
    this.set("vetoed", Value.fromBoolean(value));
  }

  get completed(): boolean {
    let value = this.get("completed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set completed(value: boolean) {
    this.set("completed", Value.fromBoolean(value));
  }

  get cancelled(): boolean {
    let value = this.get("cancelled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set cancelled(value: boolean) {
    this.set("cancelled", Value.fromBoolean(value));
  }
}

export class ProposalMetadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProposalMetadata entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ProposalMetadata must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ProposalMetadata", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ProposalMetadata | null {
    return changetype<ProposalMetadata | null>(
      store.get_in_block("ProposalMetadata", id),
    );
  }

  static load(id: string): ProposalMetadata | null {
    return changetype<ProposalMetadata | null>(
      store.get("ProposalMetadata", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get title(): string {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get body(): string {
    let value = this.get("body");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set body(value: string) {
    this.set("body", Value.fromString(value));
  }

  get discussion(): string {
    let value = this.get("discussion");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set discussion(value: string) {
    this.set("discussion", Value.fromString(value));
  }

  get execution(): string {
    let value = this.get("execution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set execution(value: string) {
    this.set("execution", Value.fromString(value));
  }

  get choices(): Array<string> {
    let value = this.get("choices");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set choices(value: Array<string>) {
    this.set("choices", Value.fromStringArray(value));
  }

  get labels(): Array<string> {
    let value = this.get("labels");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set labels(value: Array<string>) {
    this.set("labels", Value.fromStringArray(value));
  }
}

export class Vote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Vote must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Vote", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Vote | null {
    return changetype<Vote | null>(store.get_in_block("Vote", id));
  }

  static load(id: string): Vote | null {
    return changetype<Vote | null>(store.get("Vote", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get voter(): string {
    let value = this.get("voter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set voter(value: string) {
    this.set("voter", Value.fromString(value));
  }

  get space(): string {
    let value = this.get("space");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set space(value: string) {
    this.set("space", Value.fromString(value));
  }

  get proposal(): i32 {
    let value = this.get("proposal");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set proposal(value: i32) {
    this.set("proposal", Value.fromI32(value));
  }

  get choice(): i32 {
    let value = this.get("choice");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set choice(value: i32) {
    this.set("choice", Value.fromI32(value));
  }

  get vp(): BigDecimal {
    let value = this.get("vp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set vp(value: BigDecimal) {
    this.set("vp", Value.fromBigDecimal(value));
  }

  get metadata(): string | null {
    let value = this.get("metadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set metadata(value: string | null) {
    if (!value) {
      this.unset("metadata");
    } else {
      this.set("metadata", Value.fromString(<string>value));
    }
  }

  get created(): i32 {
    let value = this.get("created");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set created(value: i32) {
    this.set("created", Value.fromI32(value));
  }

  get tx(): Bytes {
    let value = this.get("tx");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tx(value: Bytes) {
    this.set("tx", Value.fromBytes(value));
  }
}

export class VoteMetadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VoteMetadata entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VoteMetadata must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("VoteMetadata", id.toString(), this);
    }
  }

  static loadInBlock(id: string): VoteMetadata | null {
    return changetype<VoteMetadata | null>(
      store.get_in_block("VoteMetadata", id),
    );
  }

  static load(id: string): VoteMetadata | null {
    return changetype<VoteMetadata | null>(store.get("VoteMetadata", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get reason(): string {
    let value = this.get("reason");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set reason(value: string) {
    this.set("reason", Value.fromString(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address_type(): i32 {
    let value = this.get("address_type");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set address_type(value: i32) {
    this.set("address_type", Value.fromI32(value));
  }

  get proposal_count(): i32 {
    let value = this.get("proposal_count");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set proposal_count(value: i32) {
    this.set("proposal_count", Value.fromI32(value));
  }

  get vote_count(): i32 {
    let value = this.get("vote_count");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set vote_count(value: i32) {
    this.set("vote_count", Value.fromI32(value));
  }

  get created(): i32 {
    let value = this.get("created");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set created(value: i32) {
    this.set("created", Value.fromI32(value));
  }
}

export class Leaderboard extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Leaderboard entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Leaderboard must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Leaderboard", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Leaderboard | null {
    return changetype<Leaderboard | null>(
      store.get_in_block("Leaderboard", id),
    );
  }

  static load(id: string): Leaderboard | null {
    return changetype<Leaderboard | null>(store.get("Leaderboard", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get space(): string {
    let value = this.get("space");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set space(value: string) {
    this.set("space", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get proposal_count(): i32 {
    let value = this.get("proposal_count");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set proposal_count(value: i32) {
    this.set("proposal_count", Value.fromI32(value));
  }

  get vote_count(): i32 {
    let value = this.get("vote_count");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set vote_count(value: i32) {
    this.set("vote_count", Value.fromI32(value));
  }
}

export class StarknetL1Execution extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StarknetL1Execution entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type StarknetL1Execution must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("StarknetL1Execution", id.toString(), this);
    }
  }

  static loadInBlock(id: string): StarknetL1Execution | null {
    return changetype<StarknetL1Execution | null>(
      store.get_in_block("StarknetL1Execution", id),
    );
  }

  static load(id: string): StarknetL1Execution | null {
    return changetype<StarknetL1Execution | null>(
      store.get("StarknetL1Execution", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get space(): string {
    let value = this.get("space");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set space(value: string) {
    this.set("space", Value.fromString(value));
  }

  get proposalId(): i32 {
    let value = this.get("proposalId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set proposalId(value: i32) {
    this.set("proposalId", Value.fromI32(value));
  }

  get created(): i32 {
    let value = this.get("created");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set created(value: i32) {
    this.set("created", Value.fromI32(value));
  }

  get tx(): Bytes {
    let value = this.get("tx");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set tx(value: Bytes) {
    this.set("tx", Value.fromBytes(value));
  }
}

export class StrategiesParsedMetadataLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): StrategiesParsedMetadata[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<StrategiesParsedMetadata[]>(value);
  }
}

export class VotingPowerValidationStrategiesParsedMetadataLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): VotingPowerValidationStrategiesParsedMetadata[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<VotingPowerValidationStrategiesParsedMetadata[]>(value);
  }
}
