name: 'Get Deployments'
description: 'This action retrieves current production and staging apps from API instance.'
inputs:
  public-api-url:
    description: 'URL of public API instance'
    required: true
  app-1-id:
    description: 'DigitalOcean App ID for app 1'
    required: true
  app-2-id:
    description: 'DigitalOcean App ID for app 2'
    required: true
outputs:
  production-app-id:
    description: "DigitalOcean App ID for production app"
    value: ${{ steps.set-app-ids.outputs.production-app-id }}
  staging-app-id:
    description: "DigitalOcean App ID for staging app"
    value: ${{ steps.set-app-ids.outputs.staging-app-id }}
  production-index:
    description: "Index of the production app"
    value: ${{ steps.set-app-ids.outputs.production-index }}
  staging-index:
    description: "Index of the staging app"
    value: ${{ steps.set-app-ids.outputs.staging-index }}
runs:
  using: "composite"
  steps:
    - name: Fetch current deployment ID
      id: fetch-deployment-id
      run: echo "deployment-id=$(curl $INPUT_PUBLIC_API_URL/deployment | jq '.index|tonumber')" >> $GITHUB_OUTPUT
      shell: bash
      env:
        INPUT_PUBLIC_API_URL: ${{ inputs.public-api-url }}
    
    - name: Set app IDs based on deployment-id
      id: set-app-ids
      run: |
        DEPLOYMENT_ID="${{ steps.fetch-deployment-id.outputs.deployment-id }}"
        if [ "$DEPLOYMENT_ID" = "1" ]; then
          echo "production-app-id=$INPUT_APP_1_ID" >> $GITHUB_OUTPUT
          echo "staging-app-id=$INPUT_APP_2_ID" >> $GITHUB_OUTPUT
          echo "production-index=1" >> $GITHUB_OUTPUT
          echo "staging-index=2" >> $GITHUB_OUTPUT
        elif [ "$DEPLOYMENT_ID" = "2" ]; then
          echo "production-app-id=$INPUT_APP_2_ID" >> $GITHUB_OUTPUT
          echo "staging-app-id=$INPUT_APP_1_ID" >> $GITHUB_OUTPUT
          echo "production-index=2" >> $GITHUB_OUTPUT
          echo "staging-index=1" >> $GITHUB_OUTPUT
        else
          echo "Error: Unexpected deployment-id value: $DEPLOYMENT_ID"
          exit 1
        fi
      shell: bash
      env:
        INPUT_APP_1_ID: ${{ inputs.app-1-id }}
        INPUT_APP_2_ID: ${{ inputs.app-2-id }}
